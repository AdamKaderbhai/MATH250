---
title: "Class Notes 10.6"
format: html
embed-resources: true
---

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

```{r}
commute <- data.frame(day = c(1,2,3,4,5),
                      to = c(8,7,9,9,7),
                      from = c(11, 6, 13, 10, 9))

commute
```

To make ggplot, I need these aesthetics:

```{r}
#| eval: false

aes(x = day,
    y = duration,
    color = direction) +
  geom_line() +
  geom_point()
```

In a **tidy** data set:

- Each row is an observation.

- Each column is a variable.

- Each data set includes only one type of observation.

The `commute` data set has a very common sort of issue: it's in wide format where the values of a variable appear as column names. In this case, `direction`. Columns do not all represent variables. In this case, `direction`.

The solution for this particular sort of untidy data is `pivot_longer`. Other than the dataset, we need to specify three things:

- The problem column where names are actually values(in this case `to` and `from`). 

- The name of the new column where those old column names(actually variable values) will be stored.

- The name of the new column where the values in the problem column will be stored (in this case, `duration`).


```{r}
commute_plot <- commute %>% 
  pivot_longer(cols = to:from, # Select columns
               names_to = "direction",
               values_to = "duration") 

ggplot(commute_plot,aes(x = day,
    y = duration,
    color = direction)) +
  geom_line() +
  geom_point()


```

## More on untidy data.
 The `tidyr` package, which loads with `tidyverse`, includes several version of the same dataset. `table1` is the tidy version.

```{r}
table1
```

Compare:

```{r}
table2
```

Here, the names of variables are included in a single column. Use `separate` on this (not covered in class).

```{r}
table4a
table4b
```




