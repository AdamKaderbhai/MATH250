---
title: "Class notes 10.8-10.13"
author: Andrew Gard
format: html
embed-resources: true
---

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

First, let's include an image in our document. Make sure `dumpster_fire.jpeg` is in your project folder. 

![This is a label for the cool dumpster fire image](dumpster_fire.jpeg)

If you need, you can read about resizing this, etc. The label serves as alt text.

Another very important Quarto thing is footnotes^[like this].

## Project planning

I strongly recommend a two step process as you choose your topic.

1) Generate **lots** of ideas. Don't judge. Write them down. This means making a bunch of plots and numerical summaries, and it means reading more about the data and about color. 

Wait until a different day.

2) Cross of the ones ones that are too hard or too basic. Decide on your top 3. Start with number 1 and then make some exploratory plots to see if it's actually working. 

## Pivoting!

Remember, `pivot_longer` handles when come columns have names that are actually values of an unnamed variable. Let's consider `billboard` as an example.

```{r}
glimpse(billboard)
```

We need to convert the `wk` columns using `pivot_longer`. 

```{r}
billboard_long <- billboard %>% 
  pivot_longer(cols = starts_with("wk"),
               names_to = "week",
               values_to = "rank")

billboard_long %>% 
  head() %>% 
  gt::gt()
```

Wish list: 

- So many stupid `NA`s

- The work `week` is repeated in an unhelpful way.

## Oct. 10

Let's resolve these issues one at a time

```{r}
billboard_long <- billboard %>% 
  pivot_longer(cols = starts_with("wk"),
               names_to = "week",
               values_to = "rank",
               values_drop_na = TRUE)

billboard_long %>% 
  head(10) %>% 
  gt::gt()
```

We could fix the "week" problem with a mutate, possibly using `str_replace_all`. Instead, let's do it directly with `pivot_longer`.

```{r}
billboard_long <- billboard %>% 
  pivot_longer(cols = starts_with("wk"),
               names_to = "week",
               values_to = "rank",
               values_drop_na = TRUE,
               names_prefix = "wk")

billboard_long %>% 
  head(10) %>% 
  gt::gt()
```

Remember our goal is a ggplot showing song ranks over time. Let's try:

```{r}
ggplot(billboard_long, aes(y = week,
                           x = rank,
                           color = track)) + 
  geom_line(show.legend = FALSE) # so we can see the plot.
```

The problem is that `week` is still categorical. 

```{r}
billboard_long <- billboard %>% 
  pivot_longer(cols = starts_with("wk"),
               names_to = "week",
               values_to = "rank",
               values_drop_na = TRUE,
               names_prefix = "wk",
               names_transform = as.numeric)

glimpse(billboard_long)
```

Let's try the plot again:

```{r}
ggplot(billboard_long, aes(x = week,
                           y = rank,
                           color = track)) + 
  geom_line(show.legend = FALSE) 
```

I only want to keep songs that charted at least a year. To do this, I'm going to add a column showing the total number of weeks the song charted. 

```{r}
billboard_long <- billboard_long %>% 
  group_by(track) %>% 
  mutate(weeks_charted = max(week)) %>% 
  filter(weeks_charted >= 52)

glimpse(billboard_long)

ggplot(billboard_long, aes(x = week,
                           y = rank,
                           color = track)) + 
  geom_line(show.legend = TRUE) 
```

Let's get a true date column.

```{r}
billboard_long <- billboard_long %>% 
  mutate(date = date.entered + 7 * (week - 1))
glimpse(billboard_long)

ggplot(billboard_long, aes(x = date,
                           y = rank,
                           color = track)) + 
  geom_line(show.legend = TRUE) +
  scale_color_brewer(palette = "Dark2")
```

## `pivot_wider`

Let's look at `table2`. Here, the names of 2 variables are included in the `type` column and the corresponding values are in the `count` column. There are 2 rows per observation.

```{r}
table2
```

To tidy this, we need to let R know 3 things:

- how to identify observations (which columns). For us, `country` and `year.`

- the column where the variable names are currently housed.

- the column where the variable values are currently housed.

```{r}
table2 %>% 
  pivot_wider(id_cols = c(country, year),
              names_from = type,
              values_from = count)
```

## Combined variables

Sometimes a column includes more than 1 variable. The simplest tool for handling this is `separate`.

```{r}
table3
```

Let's separate this.

```{r}
table3 %>% 
  separate(col = rate,
           into = c("cases", "population"))
```



